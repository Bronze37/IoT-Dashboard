{"ast":null,"code":"var _jsxFileName = \"D:\\\\B\\xE0i t\\u1EADp\\\\IoT\\\\BTL\\\\BTL\\\\client\\\\src\\\\components\\\\DataChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport io from 'socket.io-client';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataChart({\n  temp,\n  setTemp,\n  humi,\n  setHumi,\n  light,\n  setLight,\n  label,\n  setLabel,\n  db,\n  setDb\n}) {\n  _s();\n  useEffect(() => {\n    const socket = io('http://localhost:8688');\n    const sampleDataInterval = setInterval(() => {\n      // Fallback to sample data if no updates for 5 seconds\n      if (Date.now() > 5000) {\n        const sampleTemp = Math.floor(Math.random() * 30) + 20; // Random temp between 20-50\n        const sampleHumi = Math.floor(Math.random() * 40) + 30; // Random humidity between 30-70\n        const sampleLight = Math.floor(Math.random() * 1000) + 100; // Random light level between 100-1100\n        // const sampleDb = Math.floor(Math.random() * 50) + 10; // Random dust level between 10-60\n\n        const currentTime = new Date().toLocaleTimeString();\n        setTemp(prev => [...prev, sampleTemp]);\n        setHumi(prev => [...prev, sampleHumi]);\n        setLight(prev => [...prev, sampleLight]);\n        // setDb(prev => [...prev, sampleDb]);\n        setLabel(prev => [...prev, currentTime]);\n      }\n    }, 2000);\n    socket.on('temp', data_received => {\n      const nhietdo = data_received;\n      setTemp(nhietdo);\n      const currentTime = new Date().toLocaleTimeString();\n      setLabel(currentTime);\n    });\n    socket.on('humi', data_received => {\n      const doam = data_received;\n      setHumi(doam);\n    });\n    socket.on('light', data_received => {\n      const anhsang = data_received;\n      setLight(anhsang);\n    });\n    // socket.on('db', (data_received) => {\n    //     const dobui = data_received;\n    //     setDb(dobui);\n    // });\n    // Clean up the socket when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  // const reversedLabel = [...label].reverse();\n\n  const chartData = {\n    labels: label,\n    datasets: [{\n      label: 'Nhiệt độ',\n      data: temp,\n      borderColor: 'red',\n      backgroundColor: 'rgba(255, 0, 0, 0.2)',\n      // fill: true,\n      lineTension: 0.3\n    }, {\n      label: 'Độ ẩm',\n      data: humi,\n      borderColor: 'blue',\n      backgroundColor: 'rgba(0, 0, 255, 0.2)',\n      // fill: true,\n      lineTension: 0.3\n    }, {\n      label: 'Ánh sáng',\n      data: light,\n      borderColor: 'yellow',\n      backgroundColor: 'rgba(255, 255, 0, 0.2)',\n      // fill: true,\n      lineTension: 0.3\n    }\n    // {\n    //     label: 'Độ bụi',\n    //     data: db,\n    //     borderColor: 'gray',\n    //     backgroundColor: 'rgba(255, 255, 666, 0.2)',\n    //     // fill: true,\n    //     lineTension: 0.3,\n    // },\n    ]\n  };\n\n  // Cấu hình biểu đồ\n  const chartOptions = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Hệ thống IoT'\n        }\n      }\n    }\n    // animation: {\n    //     easing: 'easeInOutQuart', // Sử dụng hàm easing easeInOutQuart\n    // },\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"border rounded-lg mr-11 ml-[20px]\",\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n_s(DataChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = DataChart;\nexport default DataChart;\nvar _c;\n$RefreshReg$(_c, \"DataChart\");","map":{"version":3,"names":["React","useEffect","Line","io","Chart","jsxDEV","_jsxDEV","DataChart","temp","setTemp","humi","setHumi","light","setLight","label","setLabel","db","setDb","_s","socket","sampleDataInterval","setInterval","Date","now","sampleTemp","Math","floor","random","sampleHumi","sampleLight","currentTime","toLocaleTimeString","prev","on","data_received","nhietdo","doam","anhsang","disconnect","chartData","labels","datasets","data","borderColor","backgroundColor","lineTension","chartOptions","scales","x","title","display","text","className","children","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Bài tập/IoT/BTL/BTL/client/src/components/DataChart.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport io from 'socket.io-client';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction DataChart({\r\n    temp,\r\n    setTemp,\r\n    humi,\r\n    setHumi,\r\n    light,\r\n    setLight,\r\n    label,\r\n    setLabel,\r\n    db,\r\n    setDb,\r\n}) {\r\n    useEffect(() => {\r\n        const socket = io('http://localhost:8688');\r\n\r\n        const sampleDataInterval = setInterval(() => {\r\n            // Fallback to sample data if no updates for 5 seconds\r\n            if (Date.now() > 5000) {\r\n                const sampleTemp = Math.floor(Math.random() * 30) + 20; // Random temp between 20-50\r\n                const sampleHumi = Math.floor(Math.random() * 40) + 30; // Random humidity between 30-70\r\n                const sampleLight = Math.floor(Math.random() * 1000) + 100; // Random light level between 100-1100\r\n                // const sampleDb = Math.floor(Math.random() * 50) + 10; // Random dust level between 10-60\r\n\r\n                const currentTime = new Date().toLocaleTimeString();\r\n                \r\n                setTemp(prev => [...prev, sampleTemp]);\r\n                setHumi(prev => [...prev, sampleHumi]);\r\n                setLight(prev => [...prev, sampleLight]);\r\n                // setDb(prev => [...prev, sampleDb]);\r\n                setLabel(prev => [...prev, currentTime]);\r\n            }\r\n        }, 2000);\r\n\r\n        socket.on('temp', (data_received) => {\r\n            const nhietdo = data_received;\r\n            setTemp(nhietdo);\r\n\r\n            const currentTime = new Date().toLocaleTimeString();\r\n            setLabel(currentTime);\r\n        });\r\n\r\n        socket.on('humi', (data_received) => {\r\n            const doam = data_received;\r\n            setHumi(doam);\r\n        });\r\n\r\n        socket.on('light', (data_received) => {\r\n            const anhsang = data_received;\r\n            setLight(anhsang);\r\n        });\r\n        // socket.on('db', (data_received) => {\r\n        //     const dobui = data_received;\r\n        //     setDb(dobui);\r\n        // });\r\n        // Clean up the socket when the component unmounts\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    // const reversedLabel = [...label].reverse();\r\n\r\n    const chartData = {\r\n        labels: label,\r\n        datasets: [\r\n            {\r\n                label: 'Nhiệt độ',\r\n                data: temp,\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255, 0, 0, 0.2)',\r\n                // fill: true,\r\n                lineTension: 0.3,\r\n            },\r\n            {\r\n                label: 'Độ ẩm',\r\n                data: humi,\r\n                borderColor: 'blue',\r\n                backgroundColor: 'rgba(0, 0, 255, 0.2)',\r\n                // fill: true,\r\n                lineTension: 0.3,\r\n            },\r\n            {\r\n                label: 'Ánh sáng',\r\n                data: light,\r\n                borderColor: 'yellow',\r\n                backgroundColor: 'rgba(255, 255, 0, 0.2)',\r\n                // fill: true,\r\n                lineTension: 0.3,\r\n            },\r\n            // {\r\n            //     label: 'Độ bụi',\r\n            //     data: db,\r\n            //     borderColor: 'gray',\r\n            //     backgroundColor: 'rgba(255, 255, 666, 0.2)',\r\n            //     // fill: true,\r\n            //     lineTension: 0.3,\r\n            // },\r\n        ],\r\n    };\r\n\r\n    // Cấu hình biểu đồ\r\n    const chartOptions = {\r\n        scales: {\r\n            x: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Hệ thống IoT',\r\n                },\r\n            },\r\n        },\r\n        // animation: {\r\n        //     easing: 'easeInOutQuart', // Sử dụng hàm easing easeInOutQuart\r\n        // },\r\n    };\r\n\r\n    return (\r\n        <div className=\"border rounded-lg mr-11 ml-[20px]\">\r\n            <Line data={chartData} options={chartOptions} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}